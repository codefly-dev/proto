syntax = "proto3";
package services.factory.v0;

import "base/v0/service.proto";
import "base/v0/endpoint.proto";
import "base/v0/environment.proto";
import "base/v0/provider.proto";
import "services/agent/v0/communicate.proto";


message LoadStatus {
  enum State {
    UNKNOWN = 0;
    READY = 1;
    ERROR = 2;
  }
  State state = 1;
  string message = 2;
}

message LoadRequest {
  bool debug = 1; // Developer debug

  // Identity of the service
  base.v0.ServiceIdentity identity = 3;



}


message LoadResponse {
  LoadStatus status = 1;
  base.v0.Version version = 2;

  // Endpoints exposed by the service
  repeated base.v0.Endpoint endpoints = 3;

  // For logging to console
  string getting_started = 4;

}

/*

Creation

 */

message CreateRequest {
}



message CreateStatus {
  enum Status {
    UNKNOWN = 0;
    CREATED = 1;
    ERROR = 2;
  }
  Status status = 1;
  string message = 2;
}

message CreateResponse {
  CreateStatus status = 1;
  repeated base.v0.Endpoint endpoints = 2; // The endpoints of the created service
}

/*

Init

*/
message InitStatus {
  enum Status {
    UNKNOWN = 0;
    SUCESS = 1;
    ERROR = 2;
  }
  Status status = 1;
  string message = 2;
}

message InitRequest {
  // Endpoints of the dependencies
  repeated base.v0.Endpoint dependencies_endpoints = 1;

  // Provider information required by the service
  repeated base.v0.ProviderInformation provider_infos = 2;
}

message InitResponse {
  InitStatus status = 1;

  string run_hash = 2; // A run hash is a proxy for the uniqueness of the behavior of a service


  // A Service can serve as a provider as well
  repeated base.v0.ProviderInformation provider_infos = 3;
}


/*

Update

*/

message UpdateRequest {
}

message UpdateResponse {
}


/*

Sync re-generate what needs to be re-generated

 */

message SyncRequest {
}

message SyncStatus {
  enum Status {
    UNKNOWN = 0;
    SUCCESS = 1;
    ERROR = 2;
  }
  Status status = 1;
  string message = 2;
}

message SyncResponse {
  SyncStatus status = 1;
}

/*

Build is the first stage of Deployment

*/


message BuildRequest {
  repeated base.v0.Endpoint dependencies_endpoints = 1;
}


message BuildStatus {
  enum Status {
    UNKNOWN = 0;
    SUCCESS = 1;
    ERROR = 2;
  }
  Status status = 1;
  string message = 2;
}

message BuildResponse {
  BuildStatus status = 1;
}

/*
Deployment
*/

message DeploymentRequest {
  base.v0.Environment environment = 1;
}

message DeploymentResponse {
}



service Factory {
  // Setup
  rpc Load (LoadRequest) returns (LoadResponse) {}

  // Init
  rpc Init (InitRequest) returns (InitResponse) {}

  // Affect Code
  rpc Create (CreateRequest) returns (CreateResponse) {}
  rpc Update (UpdateRequest) returns (UpdateResponse) {}

  // Affect Data
  rpc Sync (SyncRequest) returns (SyncResponse) {}

  // Deployment/Build only on init data
  rpc Build (BuildRequest) returns (BuildResponse) {}
  rpc Deploy (DeploymentRequest) returns (DeploymentResponse) {}

  // Communication helper
  rpc Communicate(agent.v0.Engage) returns (agent.v0.InformationRequest) {}
}
