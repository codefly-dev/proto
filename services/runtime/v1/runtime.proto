syntax = "proto3";
package service.runtime.v1;

import "base/v1/service.proto";
import "base/v1/endpoint.proto";
import "services/agent/v1/agent.proto";
import "services/agent/v1/communicate.proto";

/*
Running a service follow several steps where relevant information about the runtime environment is shared
*/


message NetworkMapping {
  string application = 1; // Application name
  string service = 2; // Service name
  base.v1.Endpoint endpoint = 3;
  repeated string addresses = 4; // List of addresses to map to
}

/*
Load

Output:
- Version of the service

*/



message LoadStatus {
  enum State {
    UNKNOWN = 0;
    READY = 1;
    ERROR = 2;
  }
  State state = 1;
  string message = 2;
}

message LoadRequest {
  bool debug = 1; // Developer debug

  // Identity of the service
  base.v1.ServiceIdentity identity = 2;
}

message LoadResponse {
  base.v1.Version version = 1;
  repeated base.v1.Endpoint endpoints = 2;
  LoadStatus status = 3;
}


/*
Init
*/



message InitStatus {
  enum State {
    UNKNOWN = 0;
    READY = 1;
    ERROR = 2;
  }
  State state = 1;
  string message = 2;
}

message InitRequest {
  repeated base.v1.Endpoint dependencies_endpoints = 3;
}


message InitResponse {
  InitStatus status = 2;
  repeated NetworkMapping network_mappings = 3;
}






/*
Start the service instance in a non-blocking way

Restarting the service is handled on the tracking side from hygge
 */

message StartRequest {
  repeated NetworkMapping network_mappings = 1;
}

message StartStatus {
  enum State {
    UNKNOWN = 0;
    STARTED = 1;
    ERROR = 2;
  }
  State state = 1;
  string message = 2;
}

message StartResponse {
  StartStatus status = 1;
  repeated agent.v1.Runtime runtime = 2;
}

/*
Get Information of the service instance
 */

message InformationRequest {
}

// InformationResponse represents the state of a service in different stages of its lifecycle
// The status is a list of statuses that are relevant
message InformationResponse {
  enum Status {
    UNKNOWN = 0;
    LOAD_IN_PROGRESS = 1;
    LOADED_SUCCESS = 2;
    LOADED_FAILED = 3;
    INIT_IN_PROGRESS = 4;
    INIT_SUCCESS = 5;
    INIT_FAILED = 6;
    START_IN_PROGRESS = 7;
    START_SUCCESS = 8;
    START_FAILED = 9;
    STOP_IN_PROGRESS = 10;
    STOP_SUCCESS = 11;
    STOP_FAILED = 12;
  }
  Status status = 1;
enum DesiredState {
    NOOP = 0;
    STARTED = 1;
    STOPPED = 2;
    RESTARTED = 3;
  }
  DesiredState desired_state = 2;
  string message = 3;
}

/*
Stop the service instance
 */

message StopRequest {
}

message StopResponse {
}

/*
Public API

*/




/*
Runtime service
 */

service Runtime {

  // Lifecycle

  // Load the Service Agent: this should be a NoOp and never fails
  rpc Load (LoadRequest) returns (LoadResponse) {}
  // Init the Service Agent: could include steps like compilation, configuration, etc.
  // An important step of Initialization is to get the list of network mappings
  rpc Init (InitRequest) returns (InitResponse) {}
  // Start the underlying service
  rpc Start (StartRequest) returns (StartResponse) {}
  // Stop the underlying service and cleanup
  rpc Stop (StopRequest) returns (StopResponse) {}

  // Information about the state of the service
  rpc Information (InformationRequest) returns (InformationResponse) {}

  // Communication helper
  rpc Communicate(agent.v1.Engage) returns (agent.v1.InformationRequest) {}
}
